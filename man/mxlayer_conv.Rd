% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mxlayer.R, R/netSharpLayer.R
\name{mxlayer_conv}
\alias{mxlayer_conv}
\title{Construct a convolution layer.}
\usage{
mxlayer_conv(layer, kernelshape, inputshape, name, inputname, stride, padding,
  sharing, mapcount, activation = c("rlinear"), ...)

mxlayer_conv(layer, kernelshape, inputshape, name, inputname, stride, padding,
  sharing, mapcount, activation = c("rlinear"), ...)
}
\arguments{
\item{layer}{A layer object, e.g. using \code{\link{mxlayer_input}}, or NULL}

\item{kernelshape}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}}

\item{inputshape}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.  If \code{layer} is specified, this can be NULL.}

\item{name}{Name of the layer}

\item{inputname}{Name of the preceding layer. If \code{layer} is specified, this can be NULL.}

\item{stride}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.}

\item{padding}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.}

\item{mapcount}{Number of maps to create.}

\item{activation}{Activation function, e.g. \code{rlinear}}

\item{layer}{A layer object, e.g. using \code{\link{mxlayer_input}}, or NULL}

\item{kernelshape}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}}

\item{inputshape}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.  If \code{layer} is specified, this can be NULL.}

\item{inputname}{Name of the preceding layer. If \code{layer} is specified, this can be NULL.}

\item{stride}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.}

\item{padding}{Numeric vector describing the number of inputs in each dimension, e.g. \code{c(3, 15, 15)}.}

\item{mapcount}{Number of maps to create.}

\item{activation}{Activation function, e.g. \code{rlinear}}
}
\description{
Construct a convolution layer.

Construct a convolution layer.
}
\examples{

# Use the layer functions to generate individual layer specifications

mxlayer_input(c(13, 13))
mxlayer_input(c(3, 7, 7), name = "pixels")

# Convolution layers automatically compute the output size and padding

mxlayer_conv(NULL, c(2, 2), 
           inputshape = c(13, 13), 
           name = "conv1", 
           inputname = "pixels"
)

mxlayer_conv(NULL, 
           c(2, 2), 
           inputshape = c(13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(2, 2)
)

mxlayer_conv(NULL, 
           c(1, 2, 2), 
           inputshape = c(3, 13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(1, 2, 2)
)

mxlayer_pool(NULL, 
           c(1, 2, 2), 
           inputshape = c(3, 13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(1, 2, 2)
)



# Specify the number of nodes in a fully connected layer

mxlayer_full(NULL, nodes = 100, name = "h3", inputname = "conv")

# Output layer

mxlayer_output(NULL, 6, name = "class", inputname = "h3")


# using magrittr pipes to connect layers ----------------------------------

require(magrittr)

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  )

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  ) \%>\% 
  mxlayer_pool(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  )

mxlayer_norm(NULL, inputshape = c(3, 11, 5), kernelshape = c(1,5,5), name = "rnorm1", inputname = "conv")

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  ) \%>\% 
  mxlayer_norm(
    kernelshape = c(1, 5, 5),
    name = "norm1", 
    stride = c(1, 2, 3),
    alpa = 0.0001,
    beta = 0.75
  )


mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(3, 5, 5), 
    name = "conv1", 
    stride = c(1, 2, 2),
    mapcount = 48
  ) \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 4, 4), 
    stride = c(1, 2, 2),
    name = "conv2"
  ) \%>\% 
  mxlayer_full(nodes = 100, name = "hid1") \%>\% 
  mxlayer_full(nodes = 30, name = "hid2") \%>\% 
  mxlayer_output(nodes = 6, name = "class")





# Use the layer functions to generate individual layer specifications

mxlayer_input(c(13, 13))
mxlayer_input(c(3, 7, 7), name = "pixels")

# Convolution layers automatically compute the output size and padding

mxlayer_conv(NULL, c(2, 2), 
           inputshape = c(13, 13), 
           name = "conv1", 
           inputname = "pixels"
)

mxlayer_conv(NULL, 
           c(2, 2), 
           inputshape = c(13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(2, 2)
)

mxlayer_conv(NULL, 
           c(1, 2, 2), 
           inputshape = c(3, 13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(1, 2, 2)
)

mxlayer_pool(NULL, 
           c(1, 2, 2), 
           inputshape = c(3, 13, 13), 
           name = "conv1", 
           inputname = "pixels", 
           stride = c(1, 2, 2)
)



# Specify the number of nodes in a fully connected layer

mxlayer_full(NULL, nodes = 100, name = "h3", inputname = "conv")

# Output layer

mxlayer_output(NULL, 6, name = "class", inputname = "h3")


# using magrittr pipes to connect layers ----------------------------------

require(magrittr)

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  )

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  ) \%>\% 
  mxlayer_pool(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  )

mxlayer_norm(NULL, inputshape = c(3, 11, 5), kernelshape = c(1,5,5), name = "rnorm1", inputname = "conv")

mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 5, 5),
    name = "conv1", 
    stride = c(1, 2, 3)
  ) \%>\% 
  mxlayer_norm(
    kernelshape = c(1, 5, 5),
    name = "norm1", 
    stride = c(1, 2, 3),
    alpa = 0.0001,
    beta = 0.75
  )


mxlayer_input(c(3, 50, 50), name = "pixels") \%>\% 
  mxlayer_conv(
    kernelshape = c(3, 5, 5), 
    name = "conv1", 
    stride = c(1, 2, 2),
    mapcount = 48
  ) \%>\% 
  mxlayer_conv(
    kernelshape = c(1, 4, 4), 
    stride = c(1, 2, 2),
    name = "conv2"
  ) \%>\% 
  mxlayer_full(nodes = 100, name = "hid1") \%>\% 
  mxlayer_full(nodes = 30, name = "hid2") \%>\% 
  mxlayer_output(nodes = 6, name = "class")




}
\seealso{
Other layer.definition.functions: \code{\link{mxlayer_full}},
  \code{\link{mxlayer_input}}, \code{\link{mxlayer_norm}},
  \code{\link{mxlayer_output}}, \code{\link{mxlayer_pool}}

Other layer.definition.functions: \code{\link{mxlayer_full}},
  \code{\link{mxlayer_input}}, \code{\link{mxlayer_norm}},
  \code{\link{mxlayer_output}}, \code{\link{mxlayer_pool}}
}

